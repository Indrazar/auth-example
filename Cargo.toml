[package]
name = "auth-sessions-example"
version = "0.0.1"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
argon2 = { version = "0.5.0", features = ["std"], optional = true }
axum = { version = "0.6", optional = true, features = ["headers", "ws"] }
axum-server = { version = "0.5", features = ["tls-rustls"], optional = true }
base64 = { version = "0.21", features = ["std"], optional = true }
blake2 = {version = "0.10.6", optional = true }
broadcaster = "1"
cfg-if = "1"
chrono = { version = "0.4", optional = true, default-features = false, features = ["clock", "std"] }
console_error_panic_hook = "0.1"
console_log = "1.0"
default-struct-builder = "0.4"
dotenvy = { version = "0.15", optional = true }
dotenvy_macro = "0.15"
email_address = { version = "0.2", optional = true }
futures = "0.3"
gloo-net = "0.3"
http = "0.2"
js-sys = "0.3"
#jsonwebtoken = { version = "8.0", optional = true }
lazy_static = "1"
leptos = { git = "https://github.com/leptos-rs/leptos", branch = "effect-cleanups", default-features = false}
leptos_axum = { git = "https://github.com/leptos-rs/leptos", branch = "effect-cleanups", default-features = false, optional = true }
leptos_meta = { git = "https://github.com/leptos-rs/leptos", branch = "effect-cleanups", optional = true }
leptos_reactive = { git = "https://github.com/leptos-rs/leptos", branch = "effect-cleanups" }
leptos_router = { git = "https://github.com/leptos-rs/leptos", branch = "effect-cleanups", default-features = false }
log = "0.4"
mime = { version = "0.3", optional = true }
secrecy = {version = "0.8.0", optional = true, features = ["serde"] }
#oauth2 = { version = "4.3", default-features = false, features = ["rustls-tls"], optional = true }
rand = { version = "0.8", features = ["std", "std_rng"], optional = true }
serde = { version = "1.0", features = ["derive"] }
serde-wasm-bindgen = "0.5"
serde_json = "1.0"
simple_logger = "4"
sqlx = { version = "0.7", features = ["runtime-tokio-rustls", "sqlite", "chrono", "uuid"], optional = true }
thiserror = "1.0"
tokio = { version = "1.25", features = ["full"], optional = true }
tokio-tungstenite = { version = "0.20", optional = true }
tower = { version = "0.4", optional = true }
#tower-governor = { version = "0.0.4", git = "https://github.com/benwis/tower-governor", optional = true }
tower-http = { version = "0.4.0", features = ["fs", "compression-gzip", "trace"], optional = true }
#tracing = { version = "0.1", optional = true }
#tracing-subscriber = { version = "0.3", features = ["env-filter"], optional = true }
uuid = { version = "1", features = ["fast-rng", "std", "serde", "v4", "v7"], optional = true }
wasm-bindgen = "0.2"
web-sys = { version = "0.3", features = ["AbortController", "AbortSignal", "HtmlDocument"] }


[features]
hydrate = [
    "leptos/hydrate",
    "leptos_meta/hydrate",
    "leptos_router/hydrate",
]
ssr = [
    "axum",
    "axum-server",
    "base64",
    "blake2",
    "dotenvy",
    "tokio",
    "tower",
    "tower-http",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "leptos_axum",
    "chrono",
    "mime",
    "sqlx",
    "email_address",
    "rand",
    "secrecy",
    "argon2",
    "uuid",
#   "tracing",
#   "tracing-subscriber",
    "tokio-tungstenite",
#   "jsonwebtoken",
#   "oauth2",
#   "tower-governor",
]

[package.metadata.cargo-all-features]
denylist = [
    "axum",
    "tower",
    "tower-http",
    "tokio",
    "leptos_axum",
]
skip_feature_sets = [["ssr", "hydrate"]]

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "auth_sessions_example"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"

# [Optional] Files in the asset-dir will be copied to the site-root directory
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves HTTPS content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
# On Linux this command must be modified to "npx playwright test"
end2end-cmd = "npx.cmd playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# cargo build --release profiles
lib-profile-release = "wasm-release"
bin-profile-release = "server-release"

[profile.wasm-release]
inherits = "release"
opt-level = "z"
lto = true
codegen-units = 1

[profile.server-release]
inherits = "release"
strip = true
opt-level = 2
lto = true
codegen-units = 1
